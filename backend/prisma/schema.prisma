generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String
}

model Student {
  id           Int            @id @default(autoincrement())
  name         String
  fatherName   String
  motherName   String
  gender       Gender
  grade        Grade
  dob          DateTime
  address      String
  profilePic   String?
  rollNumber   String         @unique
  bloodGroup   String?
  mobileNumber String?
  createdAt    DateTime       @default(now())

  // Relations
  payments        Payment[]
  feeHistory      FeeHistory[]
  studentFees     StudentFee[]
  paymentReceipts PaymentReceipt[]
}

model FeeStructure {
  id          Int       @id @default(autoincrement())
  name        String
  amount      Float
  month       DateTime
  grade       Grade
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  studentFees StudentFee[]
}

model StudentFee {
  id             Int          @id @default(autoincrement())
  status         FeeStatus    @default(PENDING)
  totalFee       Float
  paidAmount     Float        @default(0)
  dueAmount      Float
  dueDate        DateTime
  studentId      Int
  feeStructureId Int

  // Relations
  Student        Student      @relation(fields: [studentId], references: [id])
  FeeStructure   FeeStructure @relation(fields: [feeStructureId], references: [id])
  feeHistories   FeeHistory[]
  payments       Payment[]
  paymentReceipts PaymentReceipt[]
}

model FeeHistory {
  id           Int        @id @default(autoincrement())
  changeType   String     // "Manual Update", "Auto Update", "Discount"
  oldAmount    Float
  newAmount    Float
  status       FeeStatus
  note         String?
  pdfUrl       String?
  changedAt    DateTime   @default(now())
  studentFeeId Int

  // Relations
  StudentFee   StudentFee @relation(fields: [studentFeeId], references: [id])

  Student Student[]
}

model Payment {
  id             String         @id @default(uuid())
  amount         Float
  method         PaymentMethod
  transactionId  String? // Gateway transaction ID
  paymentGateway PaymentGateway
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  studentId      Int?
  studentFeeId   Int?

  // Relations
  Student        Student?    @relation(fields: [studentId], references: [id])
  StudentFee     StudentFee? @relation(fields: [studentFeeId], references: [id])
}
model PaymentReceipt {
  id           String   @id @default(uuid())
  receiptNo    String   @unique
  studentId    Int
  studentFeeId Int
  amountPaid   Float
  paymentDate  DateTime @default(now())
  paymentMethod String

  student      Student   @relation(fields: [studentId], references: [id])
  studentFee   StudentFee @relation(fields: [studentFeeId], references: [id])
}
model Staff {
  id            Int      @id @default(autoincrement())
  name          String
  gender        Gender
  dob           DateTime
  phoneNumber   String
  email         String   @unique
  password      String
  address       String
  profilePic    String?
  qualification String?
  subject       String
  university    String?
}

model ExpenseTracker {
  id          Int             @id @default(autoincrement())
  title       String
  amount      Float
  type        TransactionType
  description String
  date        DateTime
  category    String?
  createdAt   DateTime        @default(now())
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum PaymentGateway {
  STRIPE
  RAZORPAY
  PAYPAL
  PAYTM
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  UPI
  PAYPAL
}

enum FeeStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Grade {
  NURSERY
  LKG
  UKG
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
  NINTH
  TENTH
}
